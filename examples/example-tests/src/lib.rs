//! # tests
//!
//! 在 Rust 中，测试被分为单元测试和集成测试。
//!
//! ## 单元测试
//!
//! 单元测试是用来测试单个函数或模块的行为。这些测试通常写在源代码文件中，和被测试的代码一起被模块化。下面是一个简单的单元测试例子：
//!
//! 在这个例子中，#[cfg(test)] 属性用来指定测试模块，#[test] 属性用来指定测试函数。assert_eq! 宏用来断言测试的结果。
//!
//! ## 集成测试
//!
//! 集成测试用来测试多个组件或模块如何一起工作。这些测试通常写在源代码目录的同级的 tests 目录中，并且每个测试都是一个单独的 .rs 文件。下面是一个简单的集成测试例子：
//!
//! 在 src/lib.rs 文件中：
//!
//! ## 运行测试
//!
//! 你可以使用 cargo test 命令来运行所有的测试。这将运行你的单元测试和集成测试，并显示每个测试的结果。
//! 如果所有的测试都通过，它将显示一个成功的消息；否则，它将显示哪些测试失败，并提供失败的原因。
//!
pub fn add(left: usize, right: usize) -> usize {
    left + right
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
        let result = add(2, 2);
        assert_eq!(result, 4);
    }
}
